<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:jms="http://www.springframework.org/schema/jms"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:task="http://www.springframework.org/schema/task" 
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-4.3.xsd 
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-4.3.xsd 
	http://www.springframework.org/schema/mvc 
	http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
	http://www.springframework.org/schema/tx     
	http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
	http://www.springframework.org/schema/aop     
	http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
	http://www.springframework.org/schema/util
	http://www.springframework.org/schema/util/spring-util-4.3.xsd
	http://www.springframework.org/schema/jms  
    http://www.springframework.org/schema/jms/spring-jms-4.3.xsd 
	http://www.springframework.org/schema/task
	http://www.springframework.org/schema/task/spring-task-4.3.xsd
	http://activemq.apache.org/schema/core  
    http://activemq.apache.org/schema/core/activemq-core-5.7.0.xsd">
	
	
	<context:component-scan base-package="com.note.service" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Service" />
	</context:component-scan>
	<context:component-scan base-package="com.note.mq" />
	
  
  
  
  
  <!-- 引入属性文件 -->
	<context:property-placeholder location="classpath:db.properties" />
	
	<!-- 加入dbcp数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${driverClassName}" />
		<property name="url" value="${jdbc_url}" />
		<property name="username" value="${jdbc_username}" />
		<property name="password" value="${jdbc_password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${initialSize}"></property>
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="${maxActive}"></property>
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="${maxIdle}"></property>
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${minIdle}"></property>
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${maxWait}"></property>
	</bean>
	
	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/note/dao/mapping/*.xml"></property>
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.note.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>
	
	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	
	
	
  <bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">  
        <property name="brokerURL" value="tcp://localhost:61616"/>  
        <property name="userName" value="admin"/>  
        <property name="password" value="admin"/>  
    </bean> 
  
  <!--配置JMS连接工厂，session缓存大小  -->
    <bean id="connectionFactory" class="org.springframework.jms.connection.CachingConnectionFactory">  
        <constructor-arg ref="targetConnectionFactory" />  
        <property name="sessionCacheSize" value="100" />  
    </bean>  
    
    <!-- 消息处理器  该转换器是一对一传输-->  
    <bean id="jmsMessageConverter" class="org.springframework.jms.support.converter.SimpleMessageConverter" />  
  
  	<!-- 一般的mq需要定义一对一队列和订阅队列，然后引用系统自带的转换器，或者自定义的 -->
  
    <!-- ====Producer side start==== -->  
    <!-- 定义JmsTemplate的Queue类型  Spring提供的JMS工具类，它可以进行消息发送、接收等-->  
    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">  
     <property name="connectionFactory" ref="connectionFactory"/>  
     
    </bean>  
    
     <bean id="producerService" class="com.note.mq.ProducerServiceImpl">  
        <property name="jmsTemplate" ref="jmsTemplate"></property>  
        <property name="destination" value="noteQueue"></property>  
    </bean>  
    
  
 <!-- 消息监听容器 -->  
    <jms:listener-container container-type="default"  
                            connection-factory="connectionFactory" acknowledge="transacted"  
                            concurrency="10-50">  
        <jms:listener destination="noteQueue" ref="noteMessageListener"  
                      method="onMessage" />  
  
    </jms:listener-container>  
                      
    
    <!-- 定义消息监听器，用于用于监听生产者和消费者消息-->
    <bean id="noteMessageListener" class="com.note.mq.NoteMessageListener"></bean>
    
    
</beans>